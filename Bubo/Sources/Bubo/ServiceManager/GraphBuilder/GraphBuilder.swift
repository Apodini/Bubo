//
//  Created by Valentin Hartig on 12.05.20.
//

import Foundation
import SwiftGraph
import SwiftSyntax
import IndexStoreDB


/// Creates a dependency graph for a service (a Swift package) based on a set of parsed tokens from a syntax parser
/// and the raw indexing data of a build process of the service
class GraphBuilder {
    public var graph: RawDependencyGraph<Node>
    
    /// Tokens generated by parsing the raw syntax of all swift files
    var tokens: [Token]
    
    /// Token Extesnions
    var tokenExtensions: [String:Token]
    
    
    /// Configuration for the indexing database
    let indexDatabaseConfiguration: IndexDatabaseConfiguration?
    
    /// The indexing database which is queried by the indexing server
    let indexDatabase: IndexDatabase?
    
    /// The indexing server that contains all queries that can be run on the indexing database
    let indexingServer: IndexingServer?
    
    /// All permutaions of NodeRoles that are shorter then 3
    let nodeRoleCombinations: [SymbolRole]
    
    /// All permutaions of EdgeRoles that are shorter then 3
    let edgeRoleCombinations: [SymbolRole]
    
    
    /// Constructs a GraphBuilder object and initialises the indexing server needed to query raw indexing data
    init(tokens: [Token], tokenExtensions: [String:Token], service: ServiceConfiguration) {
        outputMessage(msg: "Initialising graph builder...")
        self.graph = RawDependencyGraph<Node>()
        self.tokens = tokens
        self.tokenExtensions = tokenExtensions
        
        outputMessage(msg: "Generating edge and node role permutaions")
        self.nodeRoleCombinations = NodeRole.getAllRoleCombinations()
        self.edgeRoleCombinations = EdgeRole.getAllRoleCombinations()
        /// Building the index store path --> this is the path where the raw indexing data generated by the compiler during build process lies
        let indexStorePath = service.gitRootURL
            .appendingPathComponent(".build")
            .appendingPathComponent("debug")
            .appendingPathComponent("index")
            .appendingPathComponent("store")
        
        /// Gernerating the indexing database configuration
        self.indexDatabaseConfiguration = IndexDatabaseConfiguration(indexStorePath: indexStorePath, indexDatabasePath: nil)
        
        /// Generating the indexing database with passed configuration
        do {
            try self.indexDatabase = IndexDatabase(indexDBConfig: self.indexDatabaseConfiguration!)
        } catch {
            self.indexDatabase = nil
            errorMessage(msg: "Can't build index database. Has the project been built?")
        }
        guard indexDatabase != nil else {
            errorMessage(msg: "Failed to initialise indexingServer: No indexingDatabase")
            self.indexingServer = nil
            return
        }
        
        /// Initiate the databse to read and process data at the indexpath and wait for the process to finish
        indexDatabase?.index?.pollForUnitChangesAndWait()
        self.indexingServer = IndexingServer(indexDatabase: self.indexDatabase)
    }
}


